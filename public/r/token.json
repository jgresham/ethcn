{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "token",
  "type": "registry:ui",
  "description": "Token component",
  "dependencies": [
    "wagmi",
    "viem@2.x",
    "@tanstack/react-query"
  ],
  "files": [
    {
      "path": "./src/registry/default/ui/token.tsx",
      "content": "\"use client\"\n\nimport { useReadContract } from 'wagmi'\nimport { erc20Abi } from 'viem'\nimport React from 'react'\n\ninterface TokenProps {\n  contractAddress?: `0x${string}`\n}\n\nexport function Token({ contractAddress }: TokenProps): React.JSX.Element {\n  const { data: name, error: nameError, status: nameStatus } = useReadContract({\n    address: contractAddress,\n    abi: erc20Abi,\n    functionName: 'name',\n  })\n\n  const { data: symbol, error: symbolError, status: symbolStatus } = useReadContract({\n    address: contractAddress,\n    abi: erc20Abi,\n    functionName: 'symbol',\n  })\n\n  const { data: decimals, error: decimalsError, status: decimalsStatus } = useReadContract({\n    address: contractAddress,\n    abi: erc20Abi,\n    functionName: 'decimals',\n  })\n\n  const { data: totalSupply, error: totalSupplyError, status: totalSupplyStatus } = useReadContract({\n    address: contractAddress,\n    abi: erc20Abi,\n    functionName: 'totalSupply',\n  })\n\n  // Check if any of the basic ERC20 calls failed\n  const hasError = nameError || symbolError || decimalsError || totalSupplyError\n  const isLoading = nameStatus === 'pending' || symbolStatus === 'pending' || \n                   decimalsStatus === 'pending' || totalSupplyStatus === 'pending'\n\n  if (!contractAddress) {\n    return <div>No contract address provided</div>\n  }\n\n  if (isLoading) {\n    return <div>Loading token data...</div>\n  }\n\n  if (hasError) {\n    return <div>This contract does not appear to be a valid ERC20 token</div>\n  }\n\n  if (!name || !symbol || decimals === undefined || !totalSupply) {\n    return <div>Unable to read complete token information</div>\n  }\n\n  // Format total supply with proper decimals\n  const formattedTotalSupply = Number(totalSupply) / (10 ** Number(decimals))\n\n  return (\n    <div className=\"p-4 border rounded-lg bg-card max-w-[600px]\">\n      <span className=\"text-xs text-gray-500 font-normal mb-3 leading-none\">Token</span>\n      <div className=\"space-y-2 text-sm\">\n        <div className=\"flex justify-between\">\n          <span className=\"font-medium\">Name:</span>\n          <span className=\"font-mono\">{name}</span>\n        </div>\n        <div className=\"flex justify-between\">\n          <span className=\"font-medium\">Symbol:</span>\n          <span className=\"font-mono\">{symbol}</span>\n        </div>\n        <div className=\"flex justify-between\">\n          <span className=\"font-medium\">Decimals:</span>\n          <span className=\"font-mono\">{decimals.toString()}</span>\n        </div>\n        <div className=\"flex justify-between\">\n          <span className=\"font-medium\">Total Supply:</span>\n          <span className=\"font-mono\">{formattedTotalSupply.toLocaleString()}</span>\n        </div>\n        <div className=\"flex justify-between items-center gap-4\">\n          <span className=\"font-medium\">Contract Address:</span>\n          <span className=\"font-mono text-xs truncate max-w-[200px]\">\n            {contractAddress}\n          </span>\n        </div>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:ui"
    }
  ]
}