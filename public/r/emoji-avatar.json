{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "emoji-avatar",
  "type": "registry:ui",
  "description": "Emoji avatar component",
  "dependencies": [
    "wagmi",
    "viem@2.x",
    "@tanstack/react-query"
  ],
  "files": [
    {
      "path": "./src/registry/default/ui/emoji-avatar.tsx",
      "content": "//  To match Rainbowkit ConnectButton's emoji avatar\n//  src https://github.com/rainbow-me/rainbowkit/blob/main/packages/rainbowkit/src/components/Avatar/EmojiAvatar.tsx\n\nimport React, { useEffect, useMemo, useState } from 'react';\n\nexport const EmojiAvatar = ({ address, ensImage, size }: { address: string, ensImage: string, size: number }) => {\n  const [loaded, setLoaded] = useState(false);\n  useEffect(() => {\n    if (ensImage) {\n      const img = new Image();\n      img.src = ensImage;\n      img.onload = () => setLoaded(true);\n    }\n  }, [ensImage]);\n\n  const { color: backgroundColor, emoji } = useMemo(\n    () => emojiAvatarForAddress(address),\n    [address],\n  );\n\n  if (!address) {\n    return <div style={{\n      borderRadius: size,\n      height: size,\n      width: size,\n    }} />\n  }\n\n  return ensImage ? (\n    loaded ? (\n      <div\n        style={{\n          backgroundSize: 'cover',\n          borderRadius: size,\n          backgroundImage: `url(${ensImage})`,\n          backgroundPosition: 'center',\n          height: size,\n          width: size,\n        }}\n      />\n    ) : (\n      <div\n        style={{\n          alignItems: 'center',\n          backgroundSize: 'cover',\n          borderRadius: size,\n          color: 'modalText',\n          display: 'flex',\n          justifyContent: 'center',\n          height: size,\n          width: size,\n        }}\n        className='bg-gray-200 dark:bg-gray-800'\n      >\n      </div>\n    )\n  ) : (\n    <div\n      style={{\n        borderRadius: size,\n        alignItems: 'center',\n        display: 'flex',\n        justifyContent: 'center',\n        overflow: 'hidden',\n        ...(!ensImage && { backgroundColor }),\n        height: size,\n        width: size,\n      }}\n    >\n      {emoji}\n    </div>\n  );\n};\n\nconst colors = [\n  '#FC5C54',\n  '#FFD95A',\n  '#E95D72',\n  '#6A87C8',\n  '#5FD0F3',\n  '#75C06B',\n  '#FFDD86',\n  '#5FC6D4',\n  '#FF949A',\n  '#FF8024',\n  '#9BA1A4',\n  '#EC66FF',\n  '#FF8CBC',\n  '#FF9A23',\n  '#C5DADB',\n  '#A8CE63',\n  '#71ABFF',\n  '#FFE279',\n  '#B6B1B6',\n  '#FF6780',\n  '#A575FF',\n  '#4D82FF',\n  '#FFB35A',\n] as const;\n\nconst avatars = [\n  { color: colors[0], emoji: '🌶' },\n  { color: colors[1], emoji: '🤑' },\n  { color: colors[2], emoji: '🐙' },\n  { color: colors[3], emoji: '🫐' },\n  { color: colors[4], emoji: '🐳' },\n  { color: colors[0], emoji: '🤶' },\n  { color: colors[5], emoji: '🌲' },\n  { color: colors[6], emoji: '🌞' },\n  { color: colors[7], emoji: '🐒' },\n  { color: colors[8], emoji: '🐵' },\n  { color: colors[9], emoji: '🦊' },\n  { color: colors[10], emoji: '🐼' },\n  { color: colors[11], emoji: '🦄' },\n  { color: colors[12], emoji: '🐷' },\n  { color: colors[13], emoji: '🐧' },\n  { color: colors[8], emoji: '🦩' },\n  { color: colors[14], emoji: '👽' },\n  { color: colors[0], emoji: '🎈' },\n  { color: colors[8], emoji: '🍉' },\n  { color: colors[1], emoji: '🎉' },\n  { color: colors[15], emoji: '🐲' },\n  { color: colors[16], emoji: '🌎' },\n  { color: colors[17], emoji: '🍊' },\n  { color: colors[18], emoji: '🐭' },\n  { color: colors[19], emoji: '🍣' },\n  { color: colors[1], emoji: '🐥' },\n  { color: colors[20], emoji: '👾' },\n  { color: colors[15], emoji: '🥦' },\n  { color: colors[0], emoji: '👹' },\n  { color: colors[17], emoji: '🙀' },\n  { color: colors[4], emoji: '⛱' },\n  { color: colors[21], emoji: '⛵️' },\n  { color: colors[17], emoji: '🥳' },\n  { color: colors[8], emoji: '🤯' },\n  { color: colors[22], emoji: '🤠' },\n] as const;\n\nfunction hashCode(text: string) {\n  let hash = 0;\n  if (text.length === 0) return hash;\n  for (let i = 0; i < text.length; i++) {\n    const chr = text.charCodeAt(i);\n    hash = (hash << 5) - hash + chr;\n    hash |= 0;\n  }\n  return hash;\n}\n\nexport function emojiAvatarForAddress(address: string) {\n  const resolvedAddress = typeof address === 'string' ? address : '';\n  const avatarIndex = Math.abs(\n    hashCode(resolvedAddress.toLowerCase()) % avatars.length,\n  );\n  return avatars[avatarIndex ?? 0];\n}",
      "type": "registry:ui"
    }
  ]
}